@using System.ComponentModel.DataAnnotations

@inherits GenericDialog<TModel>

@inject NavigationManager _navigation

@typeparam TModel where TModel : class, IOrigin, IInnerProxy
@typeparam TValidator where TValidator : class, IValidator<IViewData<TModel>>

@implements IDialogContentComponent<IViewData<TModel>>
@implements IView

<CascadingValue Value="@Content">
    
    <!-- Header -->
    <GenericFormDialogHeader TModel="TModel" />

    <!-- Body -->
    <GenericFormDialogBody TValidator="TValidator" TModel="TModel" />

</CascadingValue>

<!-- Footer -->
<FluentDialogFooter>
    <FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
        <FluentButton Id="ResetPassword" OnClick="@OnResetPassword" Appearance="Appearance.Lightweight">
            Password recovery
        </FluentButton>
        <FluentSpacer />
       @*  <FluentButton Id="Register" Appearance="Appearance.Lightweight">
            Register
        </FluentButton> *@
        <FluentButton Id="SignUp" OnClick="@OnSignUp" Appearance="Appearance.Lightweight">
            Sign up
        </FluentButton>
        <FluentButton Id="SignIn" Appearance="Appearance.Accent"                     
                      OnClick="@SaveAsync">
            Sign in
        </FluentButton>
    </FluentStack>
</FluentDialogFooter>

@code
{
    private async Task OnSignUp(MouseEventArgs e)
    {
        Content.NextHref = "access/sign_up";

        await Dialog.CloseAsync(Content);
    }

    private async Task OnResetPassword(MouseEventArgs e)
    {
        Content.NextHref = "access/reset_password";

        await Dialog.CloseAsync(Content);
    }

    private async Task SaveAsync()
    {
        if ((await Content.Validator!.ValidateAsync()).IsValid)
        {
            await Dialog.CloseAsync(Content);
        }
    }

}
