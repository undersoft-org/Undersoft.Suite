// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Undersoft.SVC.Service.Infrastructure.Stores;

#nullable disable

namespace Undersoft.SVC.Service.Infrastructure.Stores.Migrations.Reports
{
    [DbContext(typeof(ReportStore))]
    partial class ReportStoreModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Database.Relation.RelationLink<Undersoft.SVC.Domain.Entities.Catalogs.Campaign, Undersoft.SVC.Domain.Entities.Catalogs.Vaccine>", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<long?>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<long>("OriginId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(3);

                    b.Property<long?>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("LeftEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("CampaignsToVaccines", "relations");
                });

            modelBuilder.Entity("Undersoft.SVC.Domain.Entities.Address", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<int>("AddressType")
                        .HasColumnType("integer");

                    b.Property<string>("Apartment")
                        .HasColumnType("text");

                    b.Property<string>("Building")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(0);

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<long>("OriginId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(3);

                    b.Property<string>("Postcode")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.Property<long?>("SupplierId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("Index");

                    b.HasIndex("SupplierId")
                        .IsUnique();

                    b.ToTable("Addresses", "domain");
                });

            modelBuilder.Entity("Undersoft.SVC.Domain.Entities.Catalogs.Campaign", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("OriginId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(3);

                    b.Property<long?>("PriceId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("Index");

                    b.ToTable("Campaigns", "domain");
                });

            modelBuilder.Entity("Undersoft.SVC.Domain.Entities.Catalogs.Manufacturer", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<string>("ManufacturerImage")
                        .HasColumnType("text");

                    b.Property<byte[]>("ManufacturerImageData")
                        .HasColumnType("bytea");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("OriginId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(3);

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("Index");

                    b.ToTable("Manufacturers", "domain");
                });

            modelBuilder.Entity("Undersoft.SVC.Domain.Entities.Catalogs.Office", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Number")
                        .HasColumnType("text");

                    b.Property<long>("OriginId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(3);

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("Index");

                    b.ToTable("Offices", "domain");
                });

            modelBuilder.Entity("Undersoft.SVC.Domain.Entities.Catalogs.Supplier", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<long?>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<long?>("AddresslId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<long>("OriginId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(3);

                    b.Property<long?>("ProfessionalId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("Index");

                    b.ToTable("Suppliers", "domain");
                });

            modelBuilder.Entity("Undersoft.SVC.Domain.Entities.Catalogs.Vaccine", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<long?>("ManufacturerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<long>("OriginId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(3);

                    b.Property<long?>("SafetyId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SpecificationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("StockId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("Index");

                    b.HasIndex("ManufacturerId");

                    b.HasIndex("SafetyId")
                        .IsUnique();

                    b.HasIndex("SpecificationId")
                        .IsUnique();

                    b.ToTable("Vaccines", "domain");
                });

            modelBuilder.Entity("Undersoft.SVC.Domain.Entities.Cost", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<double?>("Amount")
                        .HasColumnType("double precision");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("OriginId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(3);

                    b.Property<long?>("ProcedureId")
                        .HasColumnType("bigint");

                    b.Property<double?>("Tax")
                        .HasColumnType("double precision");

                    b.Property<long?>("TrafficId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.Property<double?>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("Index");

                    b.ToTable("Costs", "domain");
                });

            modelBuilder.Entity("Undersoft.SVC.Domain.Entities.Inventory.Request", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<long>("OriginId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(3);

                    b.Property<float?>("Quentity")
                        .HasColumnType("real");

                    b.Property<long?>("StockId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("Index");

                    b.HasIndex("StockId");

                    b.ToTable("Requests", "domain");
                });

            modelBuilder.Entity("Undersoft.SVC.Domain.Entities.Inventory.Stock", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<float?>("Amount")
                        .HasColumnType("real");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<long>("OriginId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(3);

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.Property<long?>("VaccineId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Index");

                    b.HasIndex("VaccineId")
                        .IsUnique();

                    b.ToTable("Stocks", "domain");
                });

            modelBuilder.Entity("Undersoft.SVC.Domain.Entities.Inventory.Traffic", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(0);

                    b.Property<long?>("CostId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<long>("OriginId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(3);

                    b.Property<long?>("PriceId")
                        .HasColumnType("bigint");

                    b.Property<float?>("Quantity")
                        .HasColumnType("real");

                    b.Property<long?>("StockId")
                        .HasColumnType("bigint");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("CostId")
                        .IsUnique();

                    b.HasIndex("Index");

                    b.HasIndex("PriceId")
                        .IsUnique();

                    b.HasIndex("StockId");

                    b.ToTable("Traffics", "domain");
                });

            modelBuilder.Entity("Undersoft.SVC.Domain.Entities.Organization", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<string>("OrganizationFullName")
                        .HasColumnType("text");

                    b.Property<string>("OrganizationIdentifier")
                        .HasColumnType("text");

                    b.Property<int>("OrganizationIdentifierType")
                        .HasColumnType("integer");

                    b.Property<string>("OrganizationImage")
                        .HasColumnType("text");

                    b.Property<byte[]>("OrganizationImageData")
                        .HasColumnType("bytea");

                    b.Property<string>("OrganizationIndustry")
                        .HasColumnType("text");

                    b.Property<string>("OrganizationName")
                        .HasColumnType("text");

                    b.Property<int>("OrganizationSize")
                        .HasColumnType("integer");

                    b.Property<string>("OrganizationWebsites")
                        .HasColumnType("text");

                    b.Property<long>("OriginId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(3);

                    b.Property<string>("PositionInOrganization")
                        .HasColumnType("text");

                    b.Property<long?>("SupplierId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("Index");

                    b.HasIndex("SupplierId")
                        .IsUnique();

                    b.ToTable("Organizations", "domain");
                });

            modelBuilder.Entity("Undersoft.SVC.Domain.Entities.Payment", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<double?>("Amount")
                        .HasColumnType("double precision");

                    b.Property<long?>("CertificateId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("OriginId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(3);

                    b.Property<double?>("Tax")
                        .HasColumnType("double precision");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.Property<double?>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("Index");

                    b.ToTable("Payments", "domain");
                });

            modelBuilder.Entity("Undersoft.SVC.Domain.Entities.Personal", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<long?>("AppointmentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<long?>("CertificateId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<string>("Identifier")
                        .HasColumnType("text");

                    b.Property<int>("IdentifierType")
                        .HasColumnType("integer");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("bytea");

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<long>("OriginId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(3);

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<long?>("PostSymptomId")
                        .HasColumnType("bigint");

                    b.Property<string>("SecondName")
                        .HasColumnType("text");

                    b.Property<string>("SocialMedia")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.Property<string>("Websites")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Index");

                    b.ToTable("Personals", "domain");
                });

            modelBuilder.Entity("Undersoft.SVC.Domain.Entities.Price", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<double?>("Amount")
                        .HasColumnType("double precision");

                    b.Property<long?>("CampaignId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("OriginId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(3);

                    b.Property<long?>("ProcedureId")
                        .HasColumnType("bigint");

                    b.Property<double?>("Tax")
                        .HasColumnType("double precision");

                    b.Property<long?>("TrafficId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.Property<double?>("Value")
                        .HasColumnType("double precision");

                    b.HasKey("Id");

                    b.HasIndex("CampaignId")
                        .IsUnique();

                    b.HasIndex("Index");

                    b.ToTable("Prices", "domain");
                });

            modelBuilder.Entity("Undersoft.SVC.Domain.Entities.Professional", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<long>("OriginId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(3);

                    b.Property<string>("Profession")
                        .HasColumnType("text");

                    b.Property<string>("ProfessionIndustry")
                        .HasColumnType("text");

                    b.Property<string>("ProfessionalEmail")
                        .HasColumnType("text");

                    b.Property<float>("ProfessionalExperience")
                        .HasColumnType("real");

                    b.Property<string>("ProfessionalImage")
                        .HasColumnType("text");

                    b.Property<byte[]>("ProfessionalImageData")
                        .HasColumnType("bytea");

                    b.Property<string>("ProfessionalManager")
                        .HasColumnType("text");

                    b.Property<string>("ProfessionalName")
                        .HasColumnType("text");

                    b.Property<string>("ProfessionalPhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("ProfessionalPosition")
                        .HasColumnType("text");

                    b.Property<string>("ProfessionalSocialMedia")
                        .HasColumnType("text");

                    b.Property<string>("ProfessionalWebsites")
                        .HasColumnType("text");

                    b.Property<long?>("SupplierId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("Index");

                    b.HasIndex("SupplierId")
                        .IsUnique();

                    b.ToTable("Professionals", "domain");
                });

            modelBuilder.Entity("Undersoft.SVC.Domain.Entities.Safety", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int?>("ExpirationDays")
                        .HasColumnType("integer");

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<long>("OriginId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(3);

                    b.Property<float?>("Temperature")
                        .HasColumnType("real");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.Property<long?>("VaccineId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Index");

                    b.ToTable("Safety", "domain");
                });

            modelBuilder.Entity("Undersoft.SVC.Domain.Entities.Schedule", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<long?>("AppointmentId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<TimeOnly?>("EndTime")
                        .HasColumnType("time without time zone");

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<TimeSpan?>("Interval")
                        .HasColumnType("interval");

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<long>("OriginId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(3);

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<TimeOnly?>("StartTime")
                        .HasColumnType("time without time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("Index");

                    b.ToTable("Schedules", "domain");
                });

            modelBuilder.Entity("Undersoft.SVC.Domain.Entities.Specification", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Dose")
                        .HasColumnType("text");

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<long>("OriginId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(3);

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.Property<long?>("VaccineId")
                        .HasColumnType("bigint");

                    b.Property<string>("VaccineImage")
                        .HasColumnType("text");

                    b.Property<byte[]>("VaccineImageData")
                        .HasColumnType("bytea");

                    b.Property<string>("Virus")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Index");

                    b.ToTable("Specifications", "domain");
                });

            modelBuilder.Entity("Undersoft.SVC.Domain.Entities.Term", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<long?>("CertificateId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<DateTime?>("Date")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Dose")
                        .HasColumnType("text");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<TimeSpan?>("Interval")
                        .HasColumnType("interval");

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("OriginId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(3);

                    b.Property<long?>("PostSymptomId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProcedureId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("Index");

                    b.ToTable("Vaccinations", "domain");
                });

            modelBuilder.Entity("Undersoft.SVC.Domain.Entities.Vaccination.Appointment", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<long?>("CampaignId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<long?>("OfficeId")
                        .HasColumnType("bigint");

                    b.Property<long>("OriginId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(3);

                    b.Property<long?>("PersonalId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProcedureId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ScheduleId")
                        .HasColumnType("bigint");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("CampaignId");

                    b.HasIndex("Index");

                    b.HasIndex("OfficeId");

                    b.HasIndex("PersonalId")
                        .IsUnique();

                    b.HasIndex("ScheduleId")
                        .IsUnique();

                    b.ToTable("Appointments", "domain");
                });

            modelBuilder.Entity("Undersoft.SVC.Domain.Entities.Vaccination.Certificate", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<long>("OriginId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(3);

                    b.Property<long?>("PaymentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PersonalId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProcedureId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TermId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.Property<long?>("VaccineId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Index");

                    b.HasIndex("PaymentId")
                        .IsUnique();

                    b.HasIndex("PersonalId")
                        .IsUnique();

                    b.HasIndex("ProcedureId")
                        .IsUnique();

                    b.HasIndex("TermId")
                        .IsUnique();

                    b.HasIndex("VaccineId");

                    b.ToTable("Certificates");
                });

            modelBuilder.Entity("Undersoft.SVC.Domain.Entities.Vaccination.PostSymptom", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(0);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<long>("OriginId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(3);

                    b.Property<long?>("PersonalId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProcedureId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TermId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.Property<long?>("VaccineId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("Index");

                    b.HasIndex("PersonalId")
                        .IsUnique();

                    b.HasIndex("ProcedureId")
                        .IsUnique();

                    b.HasIndex("TermId")
                        .IsUnique();

                    b.HasIndex("VaccineId");

                    b.ToTable("PostSymptoms", "domain");
                });

            modelBuilder.Entity("Undersoft.SVC.Domain.Entities.Vaccination.Procedure", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<long?>("AppointmentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CertificateId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(0);

                    b.Property<long?>("CostId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<long>("OriginId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(3);

                    b.Property<long?>("PostSymptomId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PriceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TermId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.Property<long?>("VaccineId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .IsUnique();

                    b.HasIndex("CostId")
                        .IsUnique();

                    b.HasIndex("Index");

                    b.HasIndex("PriceId")
                        .IsUnique();

                    b.HasIndex("TermId")
                        .IsUnique();

                    b.HasIndex("VaccineId");

                    b.ToTable("Procedures", "domain");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Database.Relation.RelationLink<Undersoft.SVC.Domain.Entities.Catalogs.Campaign, Undersoft.SVC.Domain.Entities.Catalogs.Vaccine>", b =>
                {
                    b.HasOne("Undersoft.SVC.Domain.Entities.Catalogs.Campaign", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Undersoft.SVC.Domain.Entities.Catalogs.Vaccine", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("Undersoft.SVC.Domain.Entities.Address", b =>
                {
                    b.HasOne("Undersoft.SVC.Domain.Entities.Catalogs.Supplier", "Supplier")
                        .WithOne("Address")
                        .HasForeignKey("Undersoft.SVC.Domain.Entities.Address", "SupplierId");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Undersoft.SVC.Domain.Entities.Catalogs.Vaccine", b =>
                {
                    b.HasOne("Undersoft.SVC.Domain.Entities.Catalogs.Manufacturer", "Manufacturer")
                        .WithMany("Vaccines")
                        .HasForeignKey("ManufacturerId");

                    b.HasOne("Undersoft.SVC.Domain.Entities.Safety", "Safety")
                        .WithOne("Vaccine")
                        .HasForeignKey("Undersoft.SVC.Domain.Entities.Catalogs.Vaccine", "SafetyId");

                    b.HasOne("Undersoft.SVC.Domain.Entities.Specification", "Specification")
                        .WithOne("Vaccine")
                        .HasForeignKey("Undersoft.SVC.Domain.Entities.Catalogs.Vaccine", "SpecificationId");

                    b.Navigation("Manufacturer");

                    b.Navigation("Safety");

                    b.Navigation("Specification");
                });

            modelBuilder.Entity("Undersoft.SVC.Domain.Entities.Inventory.Request", b =>
                {
                    b.HasOne("Undersoft.SVC.Domain.Entities.Inventory.Stock", "Stock")
                        .WithMany("Requests")
                        .HasForeignKey("StockId");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("Undersoft.SVC.Domain.Entities.Inventory.Stock", b =>
                {
                    b.HasOne("Undersoft.SVC.Domain.Entities.Catalogs.Vaccine", "Vaccine")
                        .WithOne("Stock")
                        .HasForeignKey("Undersoft.SVC.Domain.Entities.Inventory.Stock", "VaccineId");

                    b.Navigation("Vaccine");
                });

            modelBuilder.Entity("Undersoft.SVC.Domain.Entities.Inventory.Traffic", b =>
                {
                    b.HasOne("Undersoft.SVC.Domain.Entities.Cost", "Cost")
                        .WithOne("Traffic")
                        .HasForeignKey("Undersoft.SVC.Domain.Entities.Inventory.Traffic", "CostId");

                    b.HasOne("Undersoft.SVC.Domain.Entities.Price", "Price")
                        .WithOne("Traffic")
                        .HasForeignKey("Undersoft.SVC.Domain.Entities.Inventory.Traffic", "PriceId");

                    b.HasOne("Undersoft.SVC.Domain.Entities.Inventory.Stock", "Stock")
                        .WithMany("Traffics")
                        .HasForeignKey("StockId");

                    b.Navigation("Cost");

                    b.Navigation("Price");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("Undersoft.SVC.Domain.Entities.Organization", b =>
                {
                    b.HasOne("Undersoft.SVC.Domain.Entities.Catalogs.Supplier", "Supplier")
                        .WithOne("Organization")
                        .HasForeignKey("Undersoft.SVC.Domain.Entities.Organization", "SupplierId");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Undersoft.SVC.Domain.Entities.Price", b =>
                {
                    b.HasOne("Undersoft.SVC.Domain.Entities.Catalogs.Campaign", "Campaign")
                        .WithOne("Price")
                        .HasForeignKey("Undersoft.SVC.Domain.Entities.Price", "CampaignId");

                    b.Navigation("Campaign");
                });

            modelBuilder.Entity("Undersoft.SVC.Domain.Entities.Professional", b =>
                {
                    b.HasOne("Undersoft.SVC.Domain.Entities.Catalogs.Supplier", "Supplier")
                        .WithOne("Professional")
                        .HasForeignKey("Undersoft.SVC.Domain.Entities.Professional", "SupplierId");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("Undersoft.SVC.Domain.Entities.Vaccination.Appointment", b =>
                {
                    b.HasOne("Undersoft.SVC.Domain.Entities.Catalogs.Campaign", "Campaign")
                        .WithMany("Appointments")
                        .HasForeignKey("CampaignId");

                    b.HasOne("Undersoft.SVC.Domain.Entities.Catalogs.Office", "Office")
                        .WithMany("Appointments")
                        .HasForeignKey("OfficeId");

                    b.HasOne("Undersoft.SVC.Domain.Entities.Personal", "Personal")
                        .WithOne("Appointment")
                        .HasForeignKey("Undersoft.SVC.Domain.Entities.Vaccination.Appointment", "PersonalId");

                    b.HasOne("Undersoft.SVC.Domain.Entities.Schedule", "Schedule")
                        .WithOne("Appointment")
                        .HasForeignKey("Undersoft.SVC.Domain.Entities.Vaccination.Appointment", "ScheduleId");

                    b.Navigation("Campaign");

                    b.Navigation("Office");

                    b.Navigation("Personal");

                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("Undersoft.SVC.Domain.Entities.Vaccination.Certificate", b =>
                {
                    b.HasOne("Undersoft.SVC.Domain.Entities.Payment", "Payment")
                        .WithOne("Certificate")
                        .HasForeignKey("Undersoft.SVC.Domain.Entities.Vaccination.Certificate", "PaymentId");

                    b.HasOne("Undersoft.SVC.Domain.Entities.Personal", "Personal")
                        .WithOne("Certificate")
                        .HasForeignKey("Undersoft.SVC.Domain.Entities.Vaccination.Certificate", "PersonalId");

                    b.HasOne("Undersoft.SVC.Domain.Entities.Vaccination.Procedure", "Procedure")
                        .WithOne("Certificate")
                        .HasForeignKey("Undersoft.SVC.Domain.Entities.Vaccination.Certificate", "ProcedureId");

                    b.HasOne("Undersoft.SVC.Domain.Entities.Term", "Term")
                        .WithOne("Certificate")
                        .HasForeignKey("Undersoft.SVC.Domain.Entities.Vaccination.Certificate", "TermId");

                    b.HasOne("Undersoft.SVC.Domain.Entities.Catalogs.Vaccine", "Vaccine")
                        .WithMany("Certificates")
                        .HasForeignKey("VaccineId");

                    b.Navigation("Payment");

                    b.Navigation("Personal");

                    b.Navigation("Procedure");

                    b.Navigation("Term");

                    b.Navigation("Vaccine");
                });

            modelBuilder.Entity("Undersoft.SVC.Domain.Entities.Vaccination.PostSymptom", b =>
                {
                    b.HasOne("Undersoft.SVC.Domain.Entities.Personal", "Personal")
                        .WithOne("PostSymptom")
                        .HasForeignKey("Undersoft.SVC.Domain.Entities.Vaccination.PostSymptom", "PersonalId");

                    b.HasOne("Undersoft.SVC.Domain.Entities.Vaccination.Procedure", "Procedure")
                        .WithOne("PostSymptom")
                        .HasForeignKey("Undersoft.SVC.Domain.Entities.Vaccination.PostSymptom", "ProcedureId");

                    b.HasOne("Undersoft.SVC.Domain.Entities.Term", "Term")
                        .WithOne("PostSymptom")
                        .HasForeignKey("Undersoft.SVC.Domain.Entities.Vaccination.PostSymptom", "TermId");

                    b.HasOne("Undersoft.SVC.Domain.Entities.Catalogs.Vaccine", "Vaccine")
                        .WithMany("PostSymptoms")
                        .HasForeignKey("VaccineId");

                    b.Navigation("Personal");

                    b.Navigation("Procedure");

                    b.Navigation("Term");

                    b.Navigation("Vaccine");
                });

            modelBuilder.Entity("Undersoft.SVC.Domain.Entities.Vaccination.Procedure", b =>
                {
                    b.HasOne("Undersoft.SVC.Domain.Entities.Vaccination.Appointment", "Appointment")
                        .WithOne("Procedure")
                        .HasForeignKey("Undersoft.SVC.Domain.Entities.Vaccination.Procedure", "AppointmentId");

                    b.HasOne("Undersoft.SVC.Domain.Entities.Cost", "Cost")
                        .WithOne("Procedure")
                        .HasForeignKey("Undersoft.SVC.Domain.Entities.Vaccination.Procedure", "CostId");

                    b.HasOne("Undersoft.SVC.Domain.Entities.Price", "Price")
                        .WithOne("Procedure")
                        .HasForeignKey("Undersoft.SVC.Domain.Entities.Vaccination.Procedure", "PriceId");

                    b.HasOne("Undersoft.SVC.Domain.Entities.Term", "Term")
                        .WithOne("Procedure")
                        .HasForeignKey("Undersoft.SVC.Domain.Entities.Vaccination.Procedure", "TermId");

                    b.HasOne("Undersoft.SVC.Domain.Entities.Catalogs.Vaccine", "Vaccine")
                        .WithMany("Procedures")
                        .HasForeignKey("VaccineId");

                    b.Navigation("Appointment");

                    b.Navigation("Cost");

                    b.Navigation("Price");

                    b.Navigation("Term");

                    b.Navigation("Vaccine");
                });

            modelBuilder.Entity("Undersoft.SVC.Domain.Entities.Catalogs.Campaign", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Price");
                });

            modelBuilder.Entity("Undersoft.SVC.Domain.Entities.Catalogs.Manufacturer", b =>
                {
                    b.Navigation("Vaccines");
                });

            modelBuilder.Entity("Undersoft.SVC.Domain.Entities.Catalogs.Office", b =>
                {
                    b.Navigation("Appointments");
                });

            modelBuilder.Entity("Undersoft.SVC.Domain.Entities.Catalogs.Supplier", b =>
                {
                    b.Navigation("Address");

                    b.Navigation("Organization");

                    b.Navigation("Professional");
                });

            modelBuilder.Entity("Undersoft.SVC.Domain.Entities.Catalogs.Vaccine", b =>
                {
                    b.Navigation("Certificates");

                    b.Navigation("PostSymptoms");

                    b.Navigation("Procedures");

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("Undersoft.SVC.Domain.Entities.Cost", b =>
                {
                    b.Navigation("Procedure");

                    b.Navigation("Traffic");
                });

            modelBuilder.Entity("Undersoft.SVC.Domain.Entities.Inventory.Stock", b =>
                {
                    b.Navigation("Requests");

                    b.Navigation("Traffics");
                });

            modelBuilder.Entity("Undersoft.SVC.Domain.Entities.Payment", b =>
                {
                    b.Navigation("Certificate");
                });

            modelBuilder.Entity("Undersoft.SVC.Domain.Entities.Personal", b =>
                {
                    b.Navigation("Appointment");

                    b.Navigation("Certificate");

                    b.Navigation("PostSymptom");
                });

            modelBuilder.Entity("Undersoft.SVC.Domain.Entities.Price", b =>
                {
                    b.Navigation("Procedure");

                    b.Navigation("Traffic");
                });

            modelBuilder.Entity("Undersoft.SVC.Domain.Entities.Safety", b =>
                {
                    b.Navigation("Vaccine");
                });

            modelBuilder.Entity("Undersoft.SVC.Domain.Entities.Schedule", b =>
                {
                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("Undersoft.SVC.Domain.Entities.Specification", b =>
                {
                    b.Navigation("Vaccine");
                });

            modelBuilder.Entity("Undersoft.SVC.Domain.Entities.Term", b =>
                {
                    b.Navigation("Certificate");

                    b.Navigation("PostSymptom");

                    b.Navigation("Procedure");
                });

            modelBuilder.Entity("Undersoft.SVC.Domain.Entities.Vaccination.Appointment", b =>
                {
                    b.Navigation("Procedure");
                });

            modelBuilder.Entity("Undersoft.SVC.Domain.Entities.Vaccination.Procedure", b =>
                {
                    b.Navigation("Certificate");

                    b.Navigation("PostSymptom");
                });
#pragma warning restore 612, 618
        }
    }
}
