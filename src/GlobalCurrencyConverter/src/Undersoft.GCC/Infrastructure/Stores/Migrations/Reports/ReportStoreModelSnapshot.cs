// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Undersoft.GCC.Infrastructure.Stores;

#nullable disable

namespace Undersoft.GCC.Infrastructure.Stores.Migrations.Reports
{
    [DbContext(typeof(ReportStore))]
    partial class ReportStoreModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true);

            modelBuilder.Entity("Undersoft.GCC.Domain.Entities.Currency", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(9);

                    b.Property<string>("CurrencyCode")
                        .HasColumnType("TEXT");

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(10);

                    b.Property<bool>("IsDecimal")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(7);

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Symbol")
                        .HasColumnType("TEXT");

                    b.Property<long>("TypeId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("Index");

                    b.ToTable("Currencies", "domain");
                });

            modelBuilder.Entity("Undersoft.GCC.Domain.Entities.CurrencyProvider", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<long?>("BaseCurrencyId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("BaseUri")
                        .HasColumnType("TEXT");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(9);

                    b.Property<string>("FullName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("HistorySince")
                        .HasColumnType("TEXT");

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(10);

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(7);

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TypeId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(5);

                    b.Property<int>("UpdateHour")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UpdateMinute")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("BaseCurrencyId");

                    b.HasIndex("Index");

                    b.ToTable("CurrencyProviders", "domain");
                });

            modelBuilder.Entity("Undersoft.GCC.Domain.Entities.CurrencyRate", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(9);

                    b.Property<int>("Decimals")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(10);

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(7);

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<long?>("ProviderId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("TEXT");

                    b.Property<double>("Rate")
                        .HasColumnType("REAL");

                    b.Property<long?>("SourceCurrencyId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("SourceRate")
                        .HasColumnType("REAL");

                    b.Property<long?>("TableId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("TargetCurrencyId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("TargetRate")
                        .HasColumnType("REAL");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TypeId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("Index");

                    b.HasIndex("ProviderId");

                    b.HasIndex("SourceCurrencyId");

                    b.HasIndex("TableId");

                    b.HasIndex("TargetCurrencyId");

                    b.ToTable("CurrencyRates", "domain");
                });

            modelBuilder.Entity("Undersoft.GCC.Domain.Entities.CurrencyRateTable", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(9);

                    b.Property<int>("Decimals")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(10);

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(7);

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<long?>("ProviderId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("TEXT");

                    b.Property<long?>("SourceCurrencyId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("SourceRate")
                        .HasColumnType("REAL");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<long>("TypeId")
                        .HasColumnType("INTEGER")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("TEXT")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("Index");

                    b.HasIndex("ProviderId");

                    b.HasIndex("SourceCurrencyId");

                    b.ToTable("CurrencyRateTable");
                });

            modelBuilder.Entity("Undersoft.GCC.Domain.Entities.CurrencyProvider", b =>
                {
                    b.HasOne("Undersoft.GCC.Domain.Entities.Currency", "BaseCurrency")
                        .WithMany("Providers")
                        .HasForeignKey("BaseCurrencyId");

                    b.Navigation("BaseCurrency");
                });

            modelBuilder.Entity("Undersoft.GCC.Domain.Entities.CurrencyRate", b =>
                {
                    b.HasOne("Undersoft.GCC.Domain.Entities.CurrencyProvider", "Provider")
                        .WithMany("Rates")
                        .HasForeignKey("ProviderId");

                    b.HasOne("Undersoft.GCC.Domain.Entities.Currency", "SourceCurrency")
                        .WithMany("SourceRates")
                        .HasForeignKey("SourceCurrencyId");

                    b.HasOne("Undersoft.GCC.Domain.Entities.CurrencyRateTable", "Table")
                        .WithMany("Rates")
                        .HasForeignKey("TableId");

                    b.HasOne("Undersoft.GCC.Domain.Entities.Currency", "TargetCurrency")
                        .WithMany("TargetRates")
                        .HasForeignKey("TargetCurrencyId");

                    b.Navigation("Provider");

                    b.Navigation("SourceCurrency");

                    b.Navigation("Table");

                    b.Navigation("TargetCurrency");
                });

            modelBuilder.Entity("Undersoft.GCC.Domain.Entities.CurrencyRateTable", b =>
                {
                    b.HasOne("Undersoft.GCC.Domain.Entities.CurrencyProvider", "Provider")
                        .WithMany("Tables")
                        .HasForeignKey("ProviderId");

                    b.HasOne("Undersoft.GCC.Domain.Entities.Currency", "SourceCurrency")
                        .WithMany("RateTables")
                        .HasForeignKey("SourceCurrencyId");

                    b.Navigation("Provider");

                    b.Navigation("SourceCurrency");
                });

            modelBuilder.Entity("Undersoft.GCC.Domain.Entities.Currency", b =>
                {
                    b.Navigation("Providers");

                    b.Navigation("RateTables");

                    b.Navigation("SourceRates");

                    b.Navigation("TargetRates");
                });

            modelBuilder.Entity("Undersoft.GCC.Domain.Entities.CurrencyProvider", b =>
                {
                    b.Navigation("Rates");

                    b.Navigation("Tables");
                });

            modelBuilder.Entity("Undersoft.GCC.Domain.Entities.CurrencyRateTable", b =>
                {
                    b.Navigation("Rates");
                });
#pragma warning restore 612, 618
        }
    }
}
