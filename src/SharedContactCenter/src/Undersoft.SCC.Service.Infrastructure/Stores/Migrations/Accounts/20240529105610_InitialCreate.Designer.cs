// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Undersoft.SCC.Service.Infrastructure.Stores;

#nullable disable

namespace Undersoft.SCC.Service.Infrastructure.Stores.Migrations.Accounts
{
    [DbContext(typeof(AccountStore))]
    [Migration("20240529105610_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Accounts")
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AccountRole", b =>
                {
                    b.Property<long>("AccountsId")
                        .HasColumnType("bigint");

                    b.Property<long>("RolesId")
                        .HasColumnType("bigint");

                    b.HasKey("AccountsId", "RolesId");

                    b.HasIndex("RolesId");

                    b.ToTable("AccountRole", "Accounts");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Server.Accounts.Account", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<long?>("AddressId")
                        .HasColumnType("bigint");

                    b.Property<bool>("Authenticated")
                        .HasColumnType("boolean");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<long?>("ConsentId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean");

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<long?>("OrganizationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PaymentId")
                        .HasColumnType("bigint");

                    b.Property<long?>("PersonalId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProfessionalId")
                        .HasColumnType("bigint");

                    b.Property<long?>("SubscriptionId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.HasIndex("ConsentId")
                        .IsUnique();

                    b.HasIndex("OrganizationId")
                        .IsUnique();

                    b.HasIndex("PaymentId")
                        .IsUnique();

                    b.HasIndex("PersonalId")
                        .IsUnique();

                    b.HasIndex("ProfessionalId")
                        .IsUnique();

                    b.HasIndex("SubscriptionId")
                        .IsUnique();

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Accounts", "Accounts");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Server.Accounts.AccountAddress", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<long?>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<string>("Apartment")
                        .HasColumnType("text");

                    b.Property<string>("Building")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<string>("Postcode")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("AccountAddress", "Accounts");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Server.Accounts.AccountClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AccountClaims", "Accounts");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Server.Accounts.AccountConsent", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<long?>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<bool>("MarketingConsent")
                        .HasColumnType("boolean");

                    b.Property<string>("MarketingText")
                        .HasColumnType("text");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<bool>("PersonalDataConsent")
                        .HasColumnType("boolean");

                    b.Property<string>("PersonalDataText")
                        .HasColumnType("text");

                    b.Property<bool>("TermsConsent")
                        .HasColumnType("boolean");

                    b.Property<string>("TermsText")
                        .HasColumnType("text");

                    b.Property<bool>("ThirdPartyConsent")
                        .HasColumnType("boolean");

                    b.Property<string>("ThirdPartyText")
                        .HasColumnType("text");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("AccountConsents", "Accounts");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Server.Accounts.AccountLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AccountLogins", "Accounts");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Server.Accounts.AccountOrganization", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<long?>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<string>("OrganizationFullName")
                        .HasColumnType("text");

                    b.Property<string>("OrganizationImage")
                        .HasColumnType("text");

                    b.Property<byte[]>("OrganizationImageData")
                        .HasColumnType("bytea");

                    b.Property<string>("OrganizationIndustry")
                        .HasColumnType("text");

                    b.Property<string>("OrganizationName")
                        .HasColumnType("text");

                    b.Property<string>("OrganizationWebsites")
                        .HasColumnType("text");

                    b.Property<string>("PositionInOrganization")
                        .HasColumnType("text");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("AccountOrganizations", "Accounts");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Server.Accounts.AccountPayment", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<long?>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<string>("CardCSV")
                        .HasColumnType("text");

                    b.Property<string>("CardExpirationDate")
                        .HasColumnType("text");

                    b.Property<string>("CardNumber")
                        .HasColumnType("text");

                    b.Property<string>("CardTitle")
                        .HasColumnType("text");

                    b.Property<string>("CardType")
                        .HasColumnType("text");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<string>("PaymentFirstName")
                        .HasColumnType("text");

                    b.Property<string>("PaymentImage")
                        .HasColumnType("text");

                    b.Property<byte[]>("PaymentImageData")
                        .HasColumnType("bytea");

                    b.Property<string>("PaymentLastName")
                        .HasColumnType("text");

                    b.Property<string>("PaymentPhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("PaymentProvider")
                        .HasColumnType("text");

                    b.Property<string>("PaymentStatus")
                        .HasColumnType("text");

                    b.Property<bool>("PaymentTermsConsent")
                        .HasColumnType("boolean");

                    b.Property<string>("PaymentType")
                        .HasColumnType("text");

                    b.Property<string>("PaymentWebsites")
                        .HasColumnType("text");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("AccountPayments", "Accounts");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Server.Accounts.AccountPersonal", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<long?>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Birthdate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("Gender")
                        .HasColumnType("text");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<byte[]>("ImageData")
                        .HasColumnType("bytea");

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("SecondName")
                        .HasColumnType("text");

                    b.Property<string>("SocialMedia")
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .HasColumnType("text");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.Property<string>("Websites")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("AccountPersonals", "Accounts");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Server.Accounts.AccountProfessional", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<long?>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<string>("Profession")
                        .HasColumnType("text");

                    b.Property<string>("ProfessionIndustry")
                        .HasColumnType("text");

                    b.Property<string>("ProfessionalEmail")
                        .HasColumnType("text");

                    b.Property<float>("ProfessionalExperience")
                        .HasColumnType("real");

                    b.Property<string>("ProfessionalPhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("ProfessionalSocialMedia")
                        .HasColumnType("text");

                    b.Property<string>("ProfessionalWebsites")
                        .HasColumnType("text");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("AccountProffesionals", "Accounts");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Server.Accounts.AccountRole", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AccountRoles", "Accounts");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Server.Accounts.AccountSubscription", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<long?>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<string>("SubscriptionCurrency")
                        .HasColumnType("text");

                    b.Property<string>("SubscriptionDescription")
                        .HasColumnType("text");

                    b.Property<DateTime>("SubscriptionExpireDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("SubscriptionName")
                        .HasColumnType("text");

                    b.Property<double>("SubscriptionPeriod")
                        .HasColumnType("double precision");

                    b.Property<double>("SubscriptionQuantity")
                        .HasColumnType("double precision");

                    b.Property<string>("SubscriptionStatus")
                        .HasColumnType("text");

                    b.Property<string>("SubscriptionToken")
                        .HasColumnType("text");

                    b.Property<double>("SubscriptionValue")
                        .HasColumnType("double precision");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.ToTable("AccountSubscriptions", "Accounts");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Server.Accounts.AccountToken", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.HasIndex("AccountId");

                    b.ToTable("AccountTokens", "Accounts");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Server.Accounts.AccountUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<long?>("AccountId")
                        .HasColumnType("bigint");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLockedOut")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("RegistrationCompleted")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AccountUsers", "Accounts");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Server.Accounts.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", "Accounts");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Server.Accounts.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("AccountRoleId")
                        .HasColumnType("bigint");

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AccountRoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "Accounts");
                });

            modelBuilder.Entity("AccountRole", b =>
                {
                    b.HasOne("Undersoft.SDK.Service.Server.Accounts.Account", null)
                        .WithMany()
                        .HasForeignKey("AccountsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Undersoft.SDK.Service.Server.Accounts.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Server.Accounts.Account", b =>
                {
                    b.HasOne("Undersoft.SDK.Service.Server.Accounts.AccountAddress", "Address")
                        .WithOne()
                        .HasForeignKey("Undersoft.SDK.Service.Server.Accounts.Account", "AddressId");

                    b.HasOne("Undersoft.SDK.Service.Server.Accounts.AccountConsent", "Consent")
                        .WithOne()
                        .HasForeignKey("Undersoft.SDK.Service.Server.Accounts.Account", "ConsentId");

                    b.HasOne("Undersoft.SDK.Service.Server.Accounts.AccountOrganization", "Organization")
                        .WithOne()
                        .HasForeignKey("Undersoft.SDK.Service.Server.Accounts.Account", "OrganizationId");

                    b.HasOne("Undersoft.SDK.Service.Server.Accounts.AccountPayment", "Payment")
                        .WithOne()
                        .HasForeignKey("Undersoft.SDK.Service.Server.Accounts.Account", "PaymentId");

                    b.HasOne("Undersoft.SDK.Service.Server.Accounts.AccountPersonal", "Personal")
                        .WithOne()
                        .HasForeignKey("Undersoft.SDK.Service.Server.Accounts.Account", "PersonalId");

                    b.HasOne("Undersoft.SDK.Service.Server.Accounts.AccountProfessional", "Professional")
                        .WithOne()
                        .HasForeignKey("Undersoft.SDK.Service.Server.Accounts.Account", "ProfessionalId");

                    b.HasOne("Undersoft.SDK.Service.Server.Accounts.AccountSubscription", "Subscription")
                        .WithOne()
                        .HasForeignKey("Undersoft.SDK.Service.Server.Accounts.Account", "SubscriptionId");

                    b.HasOne("Undersoft.SDK.Service.Server.Accounts.AccountUser", "User")
                        .WithOne()
                        .HasForeignKey("Undersoft.SDK.Service.Server.Accounts.Account", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("Consent");

                    b.Navigation("Organization");

                    b.Navigation("Payment");

                    b.Navigation("Personal");

                    b.Navigation("Professional");

                    b.Navigation("Subscription");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Server.Accounts.AccountAddress", b =>
                {
                    b.HasOne("Undersoft.SDK.Service.Server.Accounts.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Server.Accounts.AccountClaim", b =>
                {
                    b.HasOne("Undersoft.SDK.Service.Server.Accounts.AccountUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Server.Accounts.AccountConsent", b =>
                {
                    b.HasOne("Undersoft.SDK.Service.Server.Accounts.Account", "Account")
                        .WithOne()
                        .HasForeignKey("Undersoft.SDK.Service.Server.Accounts.AccountConsent", "AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Server.Accounts.AccountLogin", b =>
                {
                    b.HasOne("Undersoft.SDK.Service.Server.Accounts.AccountUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Server.Accounts.AccountOrganization", b =>
                {
                    b.HasOne("Undersoft.SDK.Service.Server.Accounts.Account", "Account")
                        .WithOne()
                        .HasForeignKey("Undersoft.SDK.Service.Server.Accounts.AccountOrganization", "AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Server.Accounts.AccountPayment", b =>
                {
                    b.HasOne("Undersoft.SDK.Service.Server.Accounts.Account", "Account")
                        .WithOne()
                        .HasForeignKey("Undersoft.SDK.Service.Server.Accounts.AccountPayment", "AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Server.Accounts.AccountPersonal", b =>
                {
                    b.HasOne("Undersoft.SDK.Service.Server.Accounts.Account", "Account")
                        .WithOne()
                        .HasForeignKey("Undersoft.SDK.Service.Server.Accounts.AccountPersonal", "AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Server.Accounts.AccountProfessional", b =>
                {
                    b.HasOne("Undersoft.SDK.Service.Server.Accounts.Account", "Account")
                        .WithOne()
                        .HasForeignKey("Undersoft.SDK.Service.Server.Accounts.AccountProfessional", "AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Server.Accounts.AccountRole", b =>
                {
                    b.HasOne("Undersoft.SDK.Service.Server.Accounts.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Undersoft.SDK.Service.Server.Accounts.AccountUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Server.Accounts.AccountSubscription", b =>
                {
                    b.HasOne("Undersoft.SDK.Service.Server.Accounts.Account", "Account")
                        .WithOne()
                        .HasForeignKey("Undersoft.SDK.Service.Server.Accounts.AccountSubscription", "AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Server.Accounts.AccountToken", b =>
                {
                    b.HasOne("Undersoft.SDK.Service.Server.Accounts.Account", "Account")
                        .WithMany("Tokens")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Undersoft.SDK.Service.Server.Accounts.AccountUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Server.Accounts.AccountUser", b =>
                {
                    b.HasOne("Undersoft.SDK.Service.Server.Accounts.Account", "Account")
                        .WithMany()
                        .HasForeignKey("AccountId");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Server.Accounts.RoleClaim", b =>
                {
                    b.HasOne("Undersoft.SDK.Service.Server.Accounts.Role", "Role")
                        .WithMany("Claims")
                        .HasForeignKey("AccountRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Undersoft.SDK.Service.Server.Accounts.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Server.Accounts.Account", b =>
                {
                    b.Navigation("Tokens");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Server.Accounts.Role", b =>
                {
                    b.Navigation("Claims");
                });
#pragma warning restore 612, 618
        }
    }
}
