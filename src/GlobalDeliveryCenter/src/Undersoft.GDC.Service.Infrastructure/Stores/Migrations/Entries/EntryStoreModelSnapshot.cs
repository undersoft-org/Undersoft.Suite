// <auto-generated />
using System;
using System.Text.Json;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Undersoft.GDC.Service.Infrastructure.Stores;

#nullable disable

namespace Undersoft.GDC.Service.Infrastructure.Stores.Migrations.Entries
{
    [DbContext(typeof(EntryStore))]
    partial class EntryStoreModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Undersoft.GDC.Domain.Entities.Activity", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<long?>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("Index");

                    b.ToTable("Activities", "domain");
                });

            modelBuilder.Entity("Undersoft.GDC.Domain.Entities.Address", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<int>("AddressType")
                        .HasColumnType("integer");

                    b.Property<string>("Apartment")
                        .HasColumnType("text");

                    b.Property<string>("Building")
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .HasColumnType("text");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<string>("Postcode")
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .HasColumnType("text");

                    b.Property<string>("Street")
                        .HasColumnType("text");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("Index");

                    b.ToTable("Addresses", "domain");
                });

            modelBuilder.Entity("Undersoft.GDC.Domain.Entities.Detail", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<byte[]>("Data")
                        .HasColumnType("bytea");

                    b.Property<JsonDocument>("Document")
                        .HasColumnType("jsonb");

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("Index");

                    b.ToTable("DetailSet", "domain");
                });

            modelBuilder.Entity("Undersoft.GDC.Domain.Entities.Endpoint", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("BaseUrl")
                        .HasColumnType("text");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<string>("Host")
                        .HasColumnType("text");

                    b.Property<string>("IP")
                        .HasColumnType("text");

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<string>("Method")
                        .HasColumnType("text");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<string>("OS")
                        .HasColumnType("text");

                    b.Property<string[]>("Parameters")
                        .HasColumnType("text[]");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<long?>("PlaceId")
                        .HasColumnType("bigint");

                    b.Property<int?>("Port")
                        .HasColumnType("integer");

                    b.Property<string>("Protocol")
                        .HasColumnType("text");

                    b.Property<string>("ReturnUrl")
                        .HasColumnType("text");

                    b.Property<string>("StateUrl")
                        .HasColumnType("text");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("Index");

                    b.HasIndex("PlaceId");

                    b.ToTable("Endpoints", "domain");
                });

            modelBuilder.Entity("Undersoft.GDC.Domain.Entities.Group", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("Index");

                    b.ToTable("Groups", "domain");
                });

            modelBuilder.Entity("Undersoft.GDC.Domain.Entities.Location", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<long?>("ActivityId")
                        .HasColumnType("bigint");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<int>("LocaleType")
                        .HasColumnType("integer");

                    b.Property<long?>("MemberId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Notices")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<int>("PhoneType")
                        .HasColumnType("integer");

                    b.Property<long?>("ResourceId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ScheduleId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ServiceId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("ActivityId")
                        .IsUnique();

                    b.HasIndex("Index");

                    b.HasIndex("MemberId")
                        .IsUnique();

                    b.HasIndex("ResourceId")
                        .IsUnique();

                    b.HasIndex("ScheduleId")
                        .IsUnique();

                    b.HasIndex("ServiceId")
                        .IsUnique();

                    b.ToTable("Locations", "domain");
                });

            modelBuilder.Entity("Undersoft.GDC.Domain.Entities.Member", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<long?>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("Index");

                    b.ToTable("Members", "domain");
                });

            modelBuilder.Entity("Undersoft.GDC.Domain.Entities.Place", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<double?>("Altitude")
                        .HasColumnType("double precision");

                    b.Property<int>("Block")
                        .HasColumnType("integer");

                    b.Property<int>("Cluster")
                        .HasColumnType("integer");

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int?>("Height")
                        .HasColumnType("integer");

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<int?>("Kind")
                        .HasColumnType("integer");

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<double?>("Latitue")
                        .HasColumnType("double precision");

                    b.Property<int?>("Length")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<long?>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<double?>("Longitude")
                        .HasColumnType("double precision");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Sector")
                        .HasColumnType("integer");

                    b.Property<int?>("Size")
                        .HasColumnType("integer");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.Property<string>("Unit")
                        .HasColumnType("text");

                    b.Property<int>("Volume")
                        .HasColumnType("integer");

                    b.Property<int?>("Width")
                        .HasColumnType("integer");

                    b.Property<int?>("X")
                        .HasColumnType("integer");

                    b.Property<int?>("Y")
                        .HasColumnType("integer");

                    b.Property<int?>("Z")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Index");

                    b.HasIndex("LocationId");

                    b.ToTable("Places", "domain");
                });

            modelBuilder.Entity("Undersoft.GDC.Domain.Entities.Resource", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<long?>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("Index");

                    b.ToTable("Resources", "domain");
                });

            modelBuilder.Entity("Undersoft.GDC.Domain.Entities.Schedule", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<long?>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("Index");

                    b.ToTable("Schedules", "domain");
                });

            modelBuilder.Entity("Undersoft.GDC.Domain.Entities.Service", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<long?>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("Index");

                    b.ToTable("Services", "domain");
                });

            modelBuilder.Entity("Undersoft.GDC.Domain.Entities.Setting", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<byte[]>("Data")
                        .HasColumnType("bytea");

                    b.Property<JsonDocument>("Document")
                        .HasColumnType("jsonb");

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("Index");

                    b.ToTable("Settings", "domain");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Data.Identifier.Identifier<Undersoft.GDC.Domain.Entities.Activity>", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<long>("Key")
                        .HasColumnType("bigint");

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("ObjectId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Key");

                    b.HasIndex("ObjectId");

                    b.ToTable("ActivityIdentifiers", "identifiers");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Data.Identifier.Identifier<Undersoft.GDC.Domain.Entities.Detail>", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<long>("Key")
                        .HasColumnType("bigint");

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("ObjectId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Key");

                    b.HasIndex("ObjectId");

                    b.ToTable("DetailIdentifiers", "identifiers");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Data.Identifier.Identifier<Undersoft.GDC.Domain.Entities.Member>", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<long>("Key")
                        .HasColumnType("bigint");

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("ObjectId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Key");

                    b.HasIndex("ObjectId");

                    b.ToTable("MemberIdentifiers", "identifiers");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Data.Identifier.Identifier<Undersoft.GDC.Domain.Entities.Resource>", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<long>("Key")
                        .HasColumnType("bigint");

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("ObjectId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Key");

                    b.HasIndex("ObjectId");

                    b.ToTable("ResourceIdentifiers", "identifiers");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Data.Identifier.Identifier<Undersoft.GDC.Domain.Entities.Schedule>", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<long>("Key")
                        .HasColumnType("bigint");

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("ObjectId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Key");

                    b.HasIndex("ObjectId");

                    b.ToTable("ScheduleIdentifiers", "identifiers");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Data.Identifier.Identifier<Undersoft.GDC.Domain.Entities.Service>", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<long>("Key")
                        .HasColumnType("bigint");

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("ObjectId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Key");

                    b.HasIndex("ObjectId");

                    b.ToTable("ServiceIdentifiers", "identifiers");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Data.Identifier.Identifier<Undersoft.GDC.Domain.Entities.Setting>", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<long>("Key")
                        .HasColumnType("bigint");

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("ObjectId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Key");

                    b.HasIndex("ObjectId");

                    b.ToTable("SettingIdentifiers", "identifiers");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Database.Relation.RelationLink<Undersoft.GDC.Domain.Entities.Activity, Undersoft.GDC.Domain.Entities.Detail>", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<long?>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<long?>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("LeftEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("ActivitiesToDetails", "relations");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Database.Relation.RelationLink<Undersoft.GDC.Domain.Entities.Activity, Undersoft.GDC.Domain.Entities.Group>", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<long?>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<long?>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("LeftEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("ActivitiesToGroups", "relations");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Database.Relation.RelationLink<Undersoft.GDC.Domain.Entities.Activity, Undersoft.GDC.Domain.Entities.Setting>", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<long?>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<long?>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("LeftEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("ActivitiesToSettings", "relations");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Database.Relation.RelationLink<Undersoft.GDC.Domain.Entities.Detail, Undersoft.GDC.Domain.Entities.Detail>", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<long?>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<long?>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("LeftEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("DetailToDetail", "relations");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Database.Relation.RelationLink<Undersoft.GDC.Domain.Entities.Group, Undersoft.GDC.Domain.Entities.Group>", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<long?>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<long?>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("LeftEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("GroupToGroup", "relations");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Database.Relation.RelationLink<Undersoft.GDC.Domain.Entities.Location, Undersoft.GDC.Domain.Entities.Address>", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<long?>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<long?>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("LeftEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("LocationsToAddresses", "relations");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Database.Relation.RelationLink<Undersoft.GDC.Domain.Entities.Member, Undersoft.GDC.Domain.Entities.Detail>", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<long?>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<long?>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("LeftEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("MembersToDetails", "relations");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Database.Relation.RelationLink<Undersoft.GDC.Domain.Entities.Member, Undersoft.GDC.Domain.Entities.Group>", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<long?>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<long?>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("LeftEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("MembersToGroups", "relations");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Database.Relation.RelationLink<Undersoft.GDC.Domain.Entities.Member, Undersoft.GDC.Domain.Entities.Member>", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<long?>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<long?>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("LeftEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("FromMemberToMember", "relations");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Database.Relation.RelationLink<Undersoft.GDC.Domain.Entities.Member, Undersoft.GDC.Domain.Entities.Service>", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<long?>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<long?>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("LeftEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("MembersToServices", "relations");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Database.Relation.RelationLink<Undersoft.GDC.Domain.Entities.Member, Undersoft.GDC.Domain.Entities.Setting>", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<long?>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<long?>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("LeftEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("MembersToSettings", "relations");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Database.Relation.RelationLink<Undersoft.GDC.Domain.Entities.Resource, Undersoft.GDC.Domain.Entities.Detail>", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<long?>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<long?>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("LeftEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("ResourcesToDetails", "relations");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Database.Relation.RelationLink<Undersoft.GDC.Domain.Entities.Resource, Undersoft.GDC.Domain.Entities.Group>", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<long?>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<long?>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("LeftEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("ResourcesToGroups", "relations");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Database.Relation.RelationLink<Undersoft.GDC.Domain.Entities.Resource, Undersoft.GDC.Domain.Entities.Setting>", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<long?>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<long?>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("LeftEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("ResourcesToSettings", "relations");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Database.Relation.RelationLink<Undersoft.GDC.Domain.Entities.Schedule, Undersoft.GDC.Domain.Entities.Detail>", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<long?>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<long?>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("LeftEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("SchedulesToDetails", "relations");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Database.Relation.RelationLink<Undersoft.GDC.Domain.Entities.Schedule, Undersoft.GDC.Domain.Entities.Group>", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<long?>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<long?>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("LeftEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("SchedulesToGroups", "relations");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Database.Relation.RelationLink<Undersoft.GDC.Domain.Entities.Schedule, Undersoft.GDC.Domain.Entities.Setting>", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<long?>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<long?>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("LeftEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("SchedulesToSettings", "relations");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Database.Relation.RelationLink<Undersoft.GDC.Domain.Entities.Service, Undersoft.GDC.Domain.Entities.Activity>", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<long?>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<long?>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("LeftEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("ServicesToActivities", "relations");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Database.Relation.RelationLink<Undersoft.GDC.Domain.Entities.Service, Undersoft.GDC.Domain.Entities.Detail>", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<long?>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<long?>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("LeftEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("ServicesToDetails", "relations");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Database.Relation.RelationLink<Undersoft.GDC.Domain.Entities.Service, Undersoft.GDC.Domain.Entities.Group>", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<long?>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<long?>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("LeftEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("ServicesToGroups", "relations");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Database.Relation.RelationLink<Undersoft.GDC.Domain.Entities.Service, Undersoft.GDC.Domain.Entities.Resource>", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<long?>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<long?>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("LeftEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("ServicesToResources", "relations");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Database.Relation.RelationLink<Undersoft.GDC.Domain.Entities.Service, Undersoft.GDC.Domain.Entities.Schedule>", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<long?>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<long?>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("LeftEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("ServicesToSchedules", "relations");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Database.Relation.RelationLink<Undersoft.GDC.Domain.Entities.Service, Undersoft.GDC.Domain.Entities.Setting>", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<long?>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<long?>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("LeftEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("ServicesToSettings", "relations");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Database.Relation.RelationLink<Undersoft.GDC.Domain.Entities.Setting, Undersoft.GDC.Domain.Entities.Setting>", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint")
                        .HasColumnOrder(1);

                    b.Property<string>("CodeNo")
                        .IsConcurrencyToken()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnOrder(4);

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(8);

                    b.Property<string>("Creator")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(9);

                    b.Property<int>("Index")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnOrder(10);

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Index"));

                    b.Property<string>("Label")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnOrder(11);

                    b.Property<long?>("LeftEntityId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Modified")
                        .HasColumnType("timestamp")
                        .HasColumnOrder(6);

                    b.Property<string>("Modifier")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnOrder(7);

                    b.Property<long?>("RightEntityId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnOrder(2);

                    b.Property<string>("TypeName")
                        .HasMaxLength(768)
                        .HasColumnType("character varying(768)")
                        .HasColumnOrder(5);

                    b.HasKey("Id");

                    b.HasIndex("LeftEntityId");

                    b.HasIndex("RightEntityId");

                    b.ToTable("SettingToSetting", "relations");
                });

            modelBuilder.Entity("Undersoft.GDC.Domain.Entities.Endpoint", b =>
                {
                    b.HasOne("Undersoft.GDC.Domain.Entities.Place", "Place")
                        .WithMany("Endpoints")
                        .HasForeignKey("PlaceId");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("Undersoft.GDC.Domain.Entities.Location", b =>
                {
                    b.HasOne("Undersoft.GDC.Domain.Entities.Activity", "Activity")
                        .WithOne("Location")
                        .HasForeignKey("Undersoft.GDC.Domain.Entities.Location", "ActivityId");

                    b.HasOne("Undersoft.GDC.Domain.Entities.Member", "Member")
                        .WithOne("Location")
                        .HasForeignKey("Undersoft.GDC.Domain.Entities.Location", "MemberId");

                    b.HasOne("Undersoft.GDC.Domain.Entities.Resource", "Resource")
                        .WithOne("Location")
                        .HasForeignKey("Undersoft.GDC.Domain.Entities.Location", "ResourceId");

                    b.HasOne("Undersoft.GDC.Domain.Entities.Schedule", "Schedule")
                        .WithOne("Location")
                        .HasForeignKey("Undersoft.GDC.Domain.Entities.Location", "ScheduleId");

                    b.HasOne("Undersoft.GDC.Domain.Entities.Service", "Service")
                        .WithOne("Location")
                        .HasForeignKey("Undersoft.GDC.Domain.Entities.Location", "ServiceId");

                    b.Navigation("Activity");

                    b.Navigation("Member");

                    b.Navigation("Resource");

                    b.Navigation("Schedule");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Undersoft.GDC.Domain.Entities.Place", b =>
                {
                    b.HasOne("Undersoft.GDC.Domain.Entities.Location", "Location")
                        .WithMany("Places")
                        .HasForeignKey("LocationId");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Data.Identifier.Identifier<Undersoft.GDC.Domain.Entities.Activity>", b =>
                {
                    b.HasOne("Undersoft.GDC.Domain.Entities.Activity", "Object")
                        .WithMany("Identifiers")
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Object");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Data.Identifier.Identifier<Undersoft.GDC.Domain.Entities.Detail>", b =>
                {
                    b.HasOne("Undersoft.GDC.Domain.Entities.Detail", "Object")
                        .WithMany("Identifiers")
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Object");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Data.Identifier.Identifier<Undersoft.GDC.Domain.Entities.Member>", b =>
                {
                    b.HasOne("Undersoft.GDC.Domain.Entities.Member", "Object")
                        .WithMany("Identifiers")
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Object");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Data.Identifier.Identifier<Undersoft.GDC.Domain.Entities.Resource>", b =>
                {
                    b.HasOne("Undersoft.GDC.Domain.Entities.Resource", "Object")
                        .WithMany("Identifiers")
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Object");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Data.Identifier.Identifier<Undersoft.GDC.Domain.Entities.Schedule>", b =>
                {
                    b.HasOne("Undersoft.GDC.Domain.Entities.Schedule", "Object")
                        .WithMany("Identifiers")
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Object");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Data.Identifier.Identifier<Undersoft.GDC.Domain.Entities.Service>", b =>
                {
                    b.HasOne("Undersoft.GDC.Domain.Entities.Service", "Object")
                        .WithMany("Identifiers")
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Object");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Data.Identifier.Identifier<Undersoft.GDC.Domain.Entities.Setting>", b =>
                {
                    b.HasOne("Undersoft.GDC.Domain.Entities.Setting", "Object")
                        .WithMany("Identifiers")
                        .HasForeignKey("ObjectId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Object");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Database.Relation.RelationLink<Undersoft.GDC.Domain.Entities.Activity, Undersoft.GDC.Domain.Entities.Detail>", b =>
                {
                    b.HasOne("Undersoft.GDC.Domain.Entities.Activity", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Undersoft.GDC.Domain.Entities.Detail", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Database.Relation.RelationLink<Undersoft.GDC.Domain.Entities.Activity, Undersoft.GDC.Domain.Entities.Group>", b =>
                {
                    b.HasOne("Undersoft.GDC.Domain.Entities.Activity", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Undersoft.GDC.Domain.Entities.Group", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Database.Relation.RelationLink<Undersoft.GDC.Domain.Entities.Activity, Undersoft.GDC.Domain.Entities.Setting>", b =>
                {
                    b.HasOne("Undersoft.GDC.Domain.Entities.Activity", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Undersoft.GDC.Domain.Entities.Setting", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Database.Relation.RelationLink<Undersoft.GDC.Domain.Entities.Detail, Undersoft.GDC.Domain.Entities.Detail>", b =>
                {
                    b.HasOne("Undersoft.GDC.Domain.Entities.Detail", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Undersoft.GDC.Domain.Entities.Detail", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Database.Relation.RelationLink<Undersoft.GDC.Domain.Entities.Group, Undersoft.GDC.Domain.Entities.Group>", b =>
                {
                    b.HasOne("Undersoft.GDC.Domain.Entities.Group", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Undersoft.GDC.Domain.Entities.Group", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Database.Relation.RelationLink<Undersoft.GDC.Domain.Entities.Location, Undersoft.GDC.Domain.Entities.Address>", b =>
                {
                    b.HasOne("Undersoft.GDC.Domain.Entities.Location", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Undersoft.GDC.Domain.Entities.Address", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Database.Relation.RelationLink<Undersoft.GDC.Domain.Entities.Member, Undersoft.GDC.Domain.Entities.Detail>", b =>
                {
                    b.HasOne("Undersoft.GDC.Domain.Entities.Member", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Undersoft.GDC.Domain.Entities.Detail", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Database.Relation.RelationLink<Undersoft.GDC.Domain.Entities.Member, Undersoft.GDC.Domain.Entities.Group>", b =>
                {
                    b.HasOne("Undersoft.GDC.Domain.Entities.Member", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Undersoft.GDC.Domain.Entities.Group", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Database.Relation.RelationLink<Undersoft.GDC.Domain.Entities.Member, Undersoft.GDC.Domain.Entities.Member>", b =>
                {
                    b.HasOne("Undersoft.GDC.Domain.Entities.Member", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Undersoft.GDC.Domain.Entities.Member", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Database.Relation.RelationLink<Undersoft.GDC.Domain.Entities.Member, Undersoft.GDC.Domain.Entities.Service>", b =>
                {
                    b.HasOne("Undersoft.GDC.Domain.Entities.Member", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Undersoft.GDC.Domain.Entities.Service", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Database.Relation.RelationLink<Undersoft.GDC.Domain.Entities.Member, Undersoft.GDC.Domain.Entities.Setting>", b =>
                {
                    b.HasOne("Undersoft.GDC.Domain.Entities.Member", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Undersoft.GDC.Domain.Entities.Setting", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Database.Relation.RelationLink<Undersoft.GDC.Domain.Entities.Resource, Undersoft.GDC.Domain.Entities.Detail>", b =>
                {
                    b.HasOne("Undersoft.GDC.Domain.Entities.Resource", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Undersoft.GDC.Domain.Entities.Detail", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Database.Relation.RelationLink<Undersoft.GDC.Domain.Entities.Resource, Undersoft.GDC.Domain.Entities.Group>", b =>
                {
                    b.HasOne("Undersoft.GDC.Domain.Entities.Resource", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Undersoft.GDC.Domain.Entities.Group", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Database.Relation.RelationLink<Undersoft.GDC.Domain.Entities.Resource, Undersoft.GDC.Domain.Entities.Setting>", b =>
                {
                    b.HasOne("Undersoft.GDC.Domain.Entities.Resource", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Undersoft.GDC.Domain.Entities.Setting", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Database.Relation.RelationLink<Undersoft.GDC.Domain.Entities.Schedule, Undersoft.GDC.Domain.Entities.Detail>", b =>
                {
                    b.HasOne("Undersoft.GDC.Domain.Entities.Schedule", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Undersoft.GDC.Domain.Entities.Detail", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Database.Relation.RelationLink<Undersoft.GDC.Domain.Entities.Schedule, Undersoft.GDC.Domain.Entities.Group>", b =>
                {
                    b.HasOne("Undersoft.GDC.Domain.Entities.Schedule", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Undersoft.GDC.Domain.Entities.Group", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Database.Relation.RelationLink<Undersoft.GDC.Domain.Entities.Schedule, Undersoft.GDC.Domain.Entities.Setting>", b =>
                {
                    b.HasOne("Undersoft.GDC.Domain.Entities.Schedule", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Undersoft.GDC.Domain.Entities.Setting", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Database.Relation.RelationLink<Undersoft.GDC.Domain.Entities.Service, Undersoft.GDC.Domain.Entities.Activity>", b =>
                {
                    b.HasOne("Undersoft.GDC.Domain.Entities.Service", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Undersoft.GDC.Domain.Entities.Activity", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Database.Relation.RelationLink<Undersoft.GDC.Domain.Entities.Service, Undersoft.GDC.Domain.Entities.Detail>", b =>
                {
                    b.HasOne("Undersoft.GDC.Domain.Entities.Service", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Undersoft.GDC.Domain.Entities.Detail", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Database.Relation.RelationLink<Undersoft.GDC.Domain.Entities.Service, Undersoft.GDC.Domain.Entities.Group>", b =>
                {
                    b.HasOne("Undersoft.GDC.Domain.Entities.Service", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Undersoft.GDC.Domain.Entities.Group", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Database.Relation.RelationLink<Undersoft.GDC.Domain.Entities.Service, Undersoft.GDC.Domain.Entities.Resource>", b =>
                {
                    b.HasOne("Undersoft.GDC.Domain.Entities.Service", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Undersoft.GDC.Domain.Entities.Resource", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Database.Relation.RelationLink<Undersoft.GDC.Domain.Entities.Service, Undersoft.GDC.Domain.Entities.Schedule>", b =>
                {
                    b.HasOne("Undersoft.GDC.Domain.Entities.Service", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Undersoft.GDC.Domain.Entities.Schedule", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Database.Relation.RelationLink<Undersoft.GDC.Domain.Entities.Service, Undersoft.GDC.Domain.Entities.Setting>", b =>
                {
                    b.HasOne("Undersoft.GDC.Domain.Entities.Service", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Undersoft.GDC.Domain.Entities.Setting", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("Undersoft.SDK.Service.Infrastructure.Database.Relation.RelationLink<Undersoft.GDC.Domain.Entities.Setting, Undersoft.GDC.Domain.Entities.Setting>", b =>
                {
                    b.HasOne("Undersoft.GDC.Domain.Entities.Setting", "LeftEntity")
                        .WithMany()
                        .HasForeignKey("LeftEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Undersoft.GDC.Domain.Entities.Setting", "RightEntity")
                        .WithMany()
                        .HasForeignKey("RightEntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("LeftEntity");

                    b.Navigation("RightEntity");
                });

            modelBuilder.Entity("Undersoft.GDC.Domain.Entities.Activity", b =>
                {
                    b.Navigation("Identifiers");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Undersoft.GDC.Domain.Entities.Detail", b =>
                {
                    b.Navigation("Identifiers");
                });

            modelBuilder.Entity("Undersoft.GDC.Domain.Entities.Location", b =>
                {
                    b.Navigation("Places");
                });

            modelBuilder.Entity("Undersoft.GDC.Domain.Entities.Member", b =>
                {
                    b.Navigation("Identifiers");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Undersoft.GDC.Domain.Entities.Place", b =>
                {
                    b.Navigation("Endpoints");
                });

            modelBuilder.Entity("Undersoft.GDC.Domain.Entities.Resource", b =>
                {
                    b.Navigation("Identifiers");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Undersoft.GDC.Domain.Entities.Schedule", b =>
                {
                    b.Navigation("Identifiers");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Undersoft.GDC.Domain.Entities.Service", b =>
                {
                    b.Navigation("Identifiers");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("Undersoft.GDC.Domain.Entities.Setting", b =>
                {
                    b.Navigation("Identifiers");
                });
#pragma warning restore 612, 618
        }
    }
}
