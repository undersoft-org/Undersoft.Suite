@using System.ComponentModel.DataAnnotations
@using Undersoft.SDK.Proxies
@using Undersoft.SDK.Rubrics
@using Undersoft.SDK;
@using Undersoft.SDK.Service.Application.GUI.View.Abstraction

@inherits ViewItem

<CascadingValue Value="Data">

    <div id="@($"{ViewId}-context-operations")" class="datagrid-body-item" role="button" @onclick="@OnItemClick">

        <FluentDataGridRow @key="@ViewId" GridTemplateColumns=@GridTemplateColumns VerticalAlignment="VerticalAlignment.Center" Style="height:35px" TGridItem="string" @ref=Reference>

            @if (FeatureFlags.Expandable)
            {
                <GenericDataGridBodyItemFeature Ordinal="1">
                    <div id="@($"{ViewId}-expander")" role="button">
                        <FluentIcon Value="@(new Icons.Regular.Size20.List())" Color="Color.Accent" />
                    </div>
                    <div>
                        <GenericMenu Position="HorizontalPosition.Right"
                                     VerticalPosition="VerticalPosition.Unset"
                                     AnchorId="@($"{ViewId}-expander")"
                                     Data="@Data"
                                     Anchored="true" />
                    </div>
                </GenericDataGridBodyItemFeature>
            }

            @if (FeatureFlags.Multiselect)
            {
                <GenericDataGridBodyItemFeature Ordinal="@(RubricOrdinalSeed > 2 ? 2 : 1)">
                    <div id="@($"{ViewId}-selector")">
                        <FluentCheckbox @bind-Value="@Checked" />
                    </div>
                </GenericDataGridBodyItemFeature>
            }

            @if (FeatureFlags.Editable && StateFlags.Editing && EditMode == EditMode.Row)
            {
                foreach (var rubric in Data.Rubrics)
                {
                    <GenericDataGridBodyItemField Rubric="rubric" Parent="this" />
                }
            }
            else
            {
                foreach (var rubric in Data.Rubrics)
                {
                    <GenericDataGridBodyItemValue Rubric="rubric" Parent="this" />
                }
            }

            @if ((FeatureFlags.Editable && EditMode != EditMode.None) || FeatureFlags.Showable)
            {
                <GenericDataGridBodyItemFeature Ordinal="@(Data.Rubrics.Count + RubricOrdinalSeed)" Parent="this">
                    <div id="@($"{ViewId}-item-operations")" role="button">
                        <FluentIcon Value="@(new Icons.Regular.Size20.Navigation())" Color="Color.Accent" />
                    </div>
                    <div id="@($"{ViewId}-item-menu")">
                        <GenericMenu Position="HorizontalPosition.Left"
                                     VerticalPosition="VerticalPosition.Unset"
                                     AnchorId="@($"{ViewId}-item-operations")"
                                     Data="@(GetItemOperationsData())"
                                     Anchored="true" />
                    </div>
                </GenericDataGridBodyItemFeature>
            }


        </FluentDataGridRow>
    </div>

    @if ((FeatureFlags.Editable && EditMode != EditMode.None) || FeatureFlags.Showable)
    {
        <div id="@($"{ViewId}-item-context-menu")">
            <GenericMenu Position="HorizontalPosition.Right"
                         Trigger="MouseButton.Right"
                         VerticalPosition="VerticalPosition.Unset"
                         AnchorId="@($"{ViewId}-context-operations")"
                         Data="@(GetItemOperationsData())"
                         Anchored="false" />
        </div>
    }

    @if (FeatureFlags.Editable && StateFlags.Editing && EditMode == EditMode.SubRow)
    {
        <FluentDataGridRow @key="@ViewId" TGridItem="string">

            <GenericFormItem Orientation="Orientation.Horizontal" Parent="this" />

        </FluentDataGridRow>
    }

</CascadingValue>

@if (FeatureFlags.Expandable)
{
    foreach (var data in Data.Where(d => d.StateFlags.Expanded))
    {
        <FluentDataGridRow @key="@data.ViewId" TGridItem="string">

            <GenericDataGridBodyItemSubGrid DataStore="@((IViewDataStore)data)" />

        </FluentDataGridRow>
    }
}




