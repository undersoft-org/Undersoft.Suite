@using System.ComponentModel.DataAnnotations
@using System.Collections

@inherits ViewItem<TModel>

@typeparam TModel where TModel : class, IOrigin, IInnerProxy
@typeparam TValidator where TValidator : class, IValidator<IViewData<TModel>>


<FluentDialogBody>
    <GenericFormSet TValidator="TValidator" TModel="TModel" Content="@Content">
        @if (Content.RubricsEnabled && _rubrics.Any())
        {
            <GenericFormItem Data="@Content" HorizontalAlignment="HorizontalAlignment.Center" Orientation="@Orientation" />
        }
        @if (Content.ExtendedRubricsEnabled && _extendedRubrics.Any())
        {
            <FluentTabs @bind-ActiveTabId="@ActiveId" Width="100%" Orientation="@Orientation">
                @foreach (var _rubric in _extendedRubrics)
                {
                    @if (ContainsTabData(_rubric))
                    {
                        <GenericFormTabsTab Rubric="_rubric" Data="@(GetTabData(_rubric))" Orientation="@Orientation" />
                    }

                }
            </FluentTabs>
        }
    </GenericFormSet>
</FluentDialogBody>

@code
{
    [CascadingParameter]
    public override IViewData<TModel> Content { get; set; } = default!;

    private IViewRubrics _rubrics => Content.Rubrics;
    private IViewRubrics _extendedRubrics => Content.ExtendedRubrics;

    public string ActiveId
    {
        get => Content.ActiveRubric.RubricName;
        set => Content.ActiveRubric = Content.ExtendedRubrics[value];
    }

    [CascadingParameter]
    public FluentDialog Dialog { get; set; } = default!;

    [CascadingParameter]
    public IViewItem FormTabs { get; set; } = default!;

    [Parameter]
    public override EntryMode EntryMode { get; set; } = EntryMode.Tabs!;

    [Parameter]
    public Orientation Orientation { get; set; } = Orientation.Vertical;

    protected override void OnInitialized()
    {
        Content.ViewItem = this;
        ResolveEntryMode();
        if(Content.RubricsEnabled)        
            Content.MapRubrics(t => t.Rubrics, p => p.Visible);        
        if (Content.ExtendedRubricsEnabled)
        {
            Content.MapRubrics(t => t.ExtendedRubrics, p => p.Extended);
            Content.InstantiateNulls(t => t.ExtendedRubrics);
            var firstRubric = Content.ExtendedRubrics.FirstOrDefault();
            if (firstRubric != null)
                Content.ActiveRubric = firstRubric;
        }     
    }

    private IViewData GetTabData(IViewRubric rubric)
    {
        var data = typeof(ViewData<>).MakeGenericType(rubric.RubricType).New<IViewData>(Model.Proxy[rubric.RubricId]);
        data.Title = (rubric.DisplayName != null) ? rubric.DisplayName : rubric.RubricName;
        data.MapRubrics(t => t.Rubrics, p => p.Visible);
        if (rubric.Disabled)
            data.Rubrics.ForEach(r => r.Disabled = true).Commit();
        return data;
    }

    private bool ContainsTabData(IViewRubric rubric)
    {
        return rubric.RubricType.IsClass ? true : false;        
    }

    private void ResolveEntryMode()
    {
        if (EntryMode != EntryMode.FormTabs)
        {
            if (EntryMode == EntryMode.Form)
            {
                Content.RubricsEnabled = true;
                Content.ExtendedRubricsEnabled = false;
            }
            else if (EntryMode == EntryMode.Tabs)
            {
                Content.RubricsEnabled = false;
                Content.ExtendedRubricsEnabled = true;
            }
        }
        else
        {
            Content.RubricsEnabled = true;
            Content.ExtendedRubricsEnabled = true;
        }
    }
}
